# -*- coding: utf-8 -*-
"""Średnia_gęstość_środek_masy_trajektoria

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/15y_JyxKDFUublF2ftrb5rS86I089uJtx
"""

import matplotlib.pyplot as plt
import numpy as np
import collections
import imageio
from collections import Counter
from google.colab import drive

# montowanie google drive
drive.mount('/content/drive')

# wczytanie danych
def load_data(name):
  with open('/content/drive/My Drive/Colab Notebooks/gameoflife/' + name) as f:
    return [float(i) for i in f.read().split()]

# wykres średnia
def plot2d(name, mean):
  x = mean[0:][::2]
  y = mean[1:][::2]

  y_mean = [np.mean(y)]*len(x)
  _, ax = plt.subplots()
  ax.plot(x, y, label='Data', marker='o')
  ax.plot(x, y_mean, label='Mean', linestyle='--')
  ax.legend(loc='upper right')
  ax.set_title(name)
  plt.xlabel('Round number') 
  plt.ylabel('Cycle') 

  plt.show()
  return y_mean[0]

# wykres gęstości
def plot3d2(name, density):
  x = np.array(density[0:][::3])
  y = np.array(density[1:][::3])
  z = np.array(density[2:][::3])

  fig = plt.figure()
  ax1 = fig.add_subplot(projection='3d')

  x_data = x
  y_data = y
  z_data = [0] * z.size
  dx = [1] * x_data.size
  dy = [1] * y_data.size
  dz = z

  ax1.bar3d(x_data, y_data, z_data, dx, dy, dz, shade=True)
  ax1.set_title(name)
  
  ax1.set_xlim([0, 10])
  ax1.set_ylim([0, 10])
  ax1.set_zlim([0, 1])
  
  plt.xlabel('x')
  plt.ylabel('y')
  #ax1.set_zlabel('length of life')
  fig.canvas.draw()       # draw the canvas, cache the renderer
  image = np.frombuffer(fig.canvas.tostring_rgb(), dtype='uint8')
  image  = image.reshape(fig.canvas.get_width_height()[::-1] + (3,))

  return image

# wykres środka masy
def plot_weight_center(x, y, z, cycle_number):
  fig = plt.figure()
  ax1 = fig.add_subplot(projection='3d')

  ax1.bar3d(x, y, [0], [1], [1], z, shade=True)
  ax1.set_title('Weight center cycle ' + str(cycle_number + 1))
  
  ax1.set_xlim([0, 10])
  ax1.set_ylim([0, 10])
  ax1.set_zlim([0, 10])
  
  plt.xlabel('x')
  plt.ylabel('y')
  ax1.set_zlabel('weight')
  fig.canvas.draw()
  image = np.frombuffer(fig.canvas.tostring_rgb(), dtype='uint8')
  image  = image.reshape(fig.canvas.get_width_height()[::-1] + (3,))

  return image

# wykres środka masy dla kilku plemion
def plot_weight_center_for_tribes_function(data, cycle_number, width, height, mass, name1):
  x = data[0]
  y = data[1]
  z = data[2]

  fig = plt.figure()
  ax1 = fig.add_subplot(projection='3d')

  x_data = x
  y_data = y
  z_data = [0] * z.size
  dx = [1] * x_data.size
  dy = [1] * y_data.size
  dz = z

  ax1.bar3d(x_data, y_data, z_data, dx, dy, dz, shade=True)
  ax1.set_title('Weight center cycle ' + str(cycle_number))
  
  ax1.set_xlim([0, width])
  ax1.set_ylim([0, height])
  ax1.set_zlim([0, mass])
  
  plt.xlabel('x')
  plt.ylabel('y')
  ax1.set_zlabel(name1)
  fig.canvas.draw()
  image = np.frombuffer(fig.canvas.tostring_rgb(), dtype='uint8')
  image  = image.reshape(fig.canvas.get_width_height()[::-1] + (3,))

  return image

def plot_weight_center_for_tribes(tribes_number, width, height, fps, name1, name2):
  data = []
  for i in range(tribes_number):
    if not name2:
      data.append(load_data(name1 + str(i) + '.txt'))
    else:
      data.append(load_data(name1 + str(tribes_number) + name2 + str(i) + '.txt'))
  data_x = []
  data_y = []
  data_z = []
  for tribe in data:
    data_x = data_x + tribe[0:][::3]
    data_y = data_y + tribe[1:][::3]
    data_z = data_z + tribe[2:][::3]
  data_x = np.array(data_x)
  data_y = np.array(data_y)
  data_z = np.array(data_z)
  data_x[data_x == -1] = -100
  data_y[data_y == -1] = -100
  imageio.mimsave('./' + name1 + str(tribes_number) + '.gif', [plot_weight_center_for_tribes_function([data_x[number:][::int(data_x.size/tribes_number)], data_y[number:][::int(data_y.size/tribes_number)], data_z[number:][::int(data_z.size/tribes_number)]], number + 1, width, height, max(data_z), name1) for number in range(int(data_x.size/tribes_number))], fps=fps)

def trajectory(x, y, z):
  fig = plt.figure()
  ax = fig.add_subplot(111, projection='3d')
  ax.plot(x,y,z)
  plt.show()

"""# Średnia"""

# Średnia
probabilities = [100, 99.99, 99.95, 99.9, 99.8, 99.7, 99.6, 99.5, 99.4, 99.3, 99.2, 99.1, 99, 98, 97, 96, 95, 94, 93, 92, 91, 90, 89, 88, 87, 86, 85, 83, 80, 70, 50, 30, 1, 0]
y_means = []

for probability in probabilities:
  y_means.append(plot2d('Mean probability ' + str(probability) + '%', load_data('mean_p' + str(probability) + '.txt')))

# from matplotlib import pyplot as plt
# import matplotlib.ticker
# from matplotlib.ticker import FormatStrFormatter

#średnie ze względu na prawdopodobieństwo
n = 29

_, ax = plt.subplots()
ax.plot(100-np.array(probabilities), y_means, marker='o')
ax.set_title("Life expectancy of the population")
plt.xlabel('The probability of changing the state of a cell\nregardless of the number of neighbors (%)')
plt.ylabel('Average death cycle of the population')
ax.grid()
plt.show()

_, ax = plt.subplots()
ax.plot(100-np.array(probabilities[:n]), y_means[:n], marker='o')
ax.set_title("Life expectancy of the population")
plt.xlabel('The probability of changing the state of a cell\nregardless of the number of neighbors (%)')
plt.ylabel('Average death cycle of the population')

ax.set_yscale('log')
ax.set_xscale('log')

plt.grid(b=True, which='major', linewidth=2, linestyle='-')
plt.grid(b=True, which='minor', linewidth=1, linestyle='--')

# ax.grid()
plt.show()

# plot2d_new2(100-np.array(probabilities[:n]), y_means[:n], 'Probability', 'Cycle', 'Life expectancy of the population')

# Gęstość średnich dla 99%
mean = load_data('mean_p99.txt')

x = mean[0:][::2]
y = mean[1:][::2]

y_mean = [np.mean(y)]*len(x)
_, ax = plt.subplots()
ax.plot(x,y, label='Data', marker='o')
ax.plot(x,y_mean, label='Mean', linestyle='--')
legend = ax.legend(loc='upper right')
ax.set_title('Mean probability 99%')
plt.xlabel('Round number')
plt.ylabel('Cycle')
plt.show()

dictionary = Counter(y)
dictionary = collections.OrderedDict(sorted(dictionary.items()))
_, ax = plt.subplots()
ax.plot(np.fromiter(dictionary.keys(), dtype=float), np.fromiter(dictionary.values(), dtype=float), marker='o')
ax.set_title("Rounds distribution 99%")
plt.xlabel('Cycle')
plt.ylabel('Sum of occurrences')
plt.show()

"""# Gęstość prawdopodobieństwa"""

# Gęstość prawdopodobieństwa
densities = [1, 2, 5, 10, 15, 20, 30, 40, 50]
probabilities = [98, 95, 90, 70]

kwargs_write = {'fps':1.0, 'quantizer':'nq'}
for probability in probabilities:
  imageio.mimsave('./den2sity' + str(probability) + '.gif', [plot3d2('Density probability ' + str(probability) + '%, cycle number ' + str(densities[i]), load_data('density_r' + str(densities[i]) + '_p' + str(probability) + '.txt')) for i in range(len(densities))], fps=2)

"""# Środek masy"""

# Środek masy
data = load_data('weight1Tribe.txt')
dataX = np.array(data[0:][::3])
dataY = np.array(data[1:][::3])
dataZ = np.array(data[2:][::3])

imageio.mimsave('./weight1Tribe.gif', [plot_weight_center(dataX[number], dataY[number], dataZ[number], number) for number in range(dataX.size)], fps=2)

# Środek masy
data = load_data('weightAll.txt')
dataX = np.array(data[0:][::3])
dataY = np.array(data[1:][::3])
dataZ = np.array(data[2:][::3])

imageio.mimsave('./weightAll.gif', [plot_weight_center(dataX[number], dataY[number], dataZ[number], number) for number in range(dataX.size)], fps=2)

# Środek masy dla 2 plemion
plot_weight_center_for_tribes(2, 10, 10, 2, 'weight', 'Tribe')

# Środek masy dla 5 plemion
plot_weight_center_for_tribes(5, 100, 100, 300, 'weight', 'Tribe')

# Środek masy dla 8 przedziałów
plot_weight_center_for_tribes(8, 10, 10, 2, 'weightInterval', '')

# Środek masy
plot_weight_center_for_tribes(1, 100, 100, 2, 'weightOne', '')
plot_weight_center_for_tribes(1, 100, 100, 2, 'weightTwo', '')

"""# Trajektoria"""

# Trajektoria
data = load_data('weightAll.txt')
dataX = np.array(data[0:][::3])
dataY = np.array(data[1:][::3])
dataZ = np.array(data[2:][::3])
trajectory(dataX, dataY, dataZ)

data = load_data('weightOne0.txt')
dataX = np.array(data[0:][::3])
dataY = np.array(data[1:][::3])
dataZ = np.array(data[2:][::3])
trajectory(dataX, dataY, dataZ)

data = load_data('weightTwo0.txt')
dataX = np.array(data[0:][::3])
dataY = np.array(data[1:][::3])
dataZ = np.array(data[2:][::3])
trajectory(dataX, dataY, dataZ)